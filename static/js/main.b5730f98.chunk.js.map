{"version":3,"sources":["income.js","IncomeInput.js","expense.js","ExpenseInput.js","App.js","serviceWorker.js","index.js"],"names":["Income","props","incomeArr","list","incomeList","map","el","index","key","text","money","className","onClick","remove","splice","action","length","IncomeInput","componentDidMount","handleSubmit","componentDidUpdate","state","handleTextChange","bind","handleMoneyChange","event","this","setState","target","value","preventDefault","parseFloat","toFixed","onSubmit","for","type","name","id","onChange","required","min","step","React","Component","Expense","expenseArr","expenseList","ExpenseInput","e","App","useState","total","setTotal","incomes","setIncomes","expenses","setExpenses","useEffect","array","sum","forEach","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5730f98.chunk.js","sourcesContent":["import React from 'react';\r\nimport './income.css';\r\n\r\nfunction Income(props) {\r\n    let incomeArr = props.list\r\n    const incomeList = incomeArr.map((el, index)=>{\r\n        return <li key={index}>{el.text}<mark>${el.money}</mark><button className='delete' onClick={()=>remove([index])} >X</button></li>\r\n    })\r\n    const remove = (index) => {\r\n        incomeArr.splice(index, 1);\r\n        props.action();\r\n    }\r\n    return (\r\n        <div>\r\n            <ul>{incomeList}</ul>\r\n            {incomeList.length === 0 && <h1>Add your incomes above!</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Income;","import React from 'react';\r\nimport Income from './income';\r\nimport './income.css'\r\n\r\nclass IncomeInput extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            incomeArr: [],\r\n            text: 'Job',\r\n            money: 324.59\r\n        }\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleMoneyChange = this.handleMoneyChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleMoneyChange(event) {\r\n        this.setState({money: event.target.value});\r\n    }\r\n    handleTextChange(event) {\r\n        this.setState({text: event.target.value});\r\n    }\r\n    handleSubmit(event) {\r\n        if (event !== null) {\r\n            event.preventDefault();\r\n        }\r\n        this.setState({incomeArr: [...this.state.incomeArr, {text: this.state.text, money: parseFloat(this.state.money).toFixed(2)}]}, ()=>{\r\n            this.props.action(this.state.incomeArr);\r\n            this.setState({text: '', money: ''});\r\n        });\r\n    }\r\n    componentDidMount= () =>{\r\n        this.handleSubmit(null);\r\n    }\r\n    componentDidUpdate = () =>{\r\n        this.props.action(this.state.incomeArr);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label for='incText'>Name of Income</label>\r\n                    <input type='text' name='text' id='incText' value={this.state.text} onChange={this.handleTextChange} required/>\r\n                    <label for='incMoney'>Money gained</label>\r\n                    <input type='number' name='number' id='incMoney' min='.01' step='.01' value={this.state.money} onChange={this.handleMoneyChange} required />\r\n                    <input type='submit' value='submit' />\r\n                </form>\r\n                <Income list={this.state.incomeArr} action={()=>this.setState({incomeArr: [...this.state.incomeArr]})}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default IncomeInput;","import React from 'react';\r\n\r\nfunction Expense(props) {\r\n    let expenseArr = props.list\r\n    const expenseList = expenseArr.map((el, index)=>{\r\n        return <li key={index}>{el.text}<mark>${el.money}</mark><button className='delete' onClick={()=>remove([index])}>X</button></li>\r\n    })\r\n    const remove = (index) => {\r\n        expenseArr.splice(index, 1);\r\n        props.action();\r\n    }\r\n    return (\r\n        <div>\r\n            <ul>{expenseList}</ul>\r\n            {expenseList.length === 0 && <h1>Add your expenses above!</h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Expense;","import React from 'react';\r\nimport Expense from './expense';\r\nimport './income.css';\r\n\r\nclass ExpenseInput extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expenseArr: [],\r\n            text: 'Rent',\r\n            money: 250\r\n        }\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleMoneyChange = this.handleMoneyChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleMoneyChange(event) {\r\n        this.setState({money: event.target.value});\r\n    }\r\n    handleTextChange(event) {\r\n        this.setState({text: event.target.value});\r\n    }\r\n    handleSubmit = (e) => {\r\n        if (e !== null) {\r\n            e.preventDefault();\r\n        }\r\n        this.setState({expenseArr: [...this.state.expenseArr, {text: this.state.text, money: parseFloat(this.state.money).toFixed(2)}]},()=>{\r\n            this.props.action(this.state.expenseArr);\r\n            this.setState({text: '', money: ''})\r\n        })\r\n    }\r\n    componentDidMount = () => {\r\n        this.handleSubmit(null);\r\n    }\r\n    componentDidUpdate = () => {\r\n        this.props.action(this.state.expenseArr);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label for='expText'>Name of Expense</label>\r\n                    <input type='text' id='expText' value={this.state.text} onChange={this.handleTextChange} required/>\r\n                    <label for=\"expMoney\">Money Lost</label>\r\n                    <input type='number' id='expMoney' min='.01' step='.01' value={this.state.money} onChange={this.handleMoneyChange} required />\r\n                    <input type='submit' value='submit' />\r\n                </form>\r\n                <Expense list={this.state.expenseArr} action={()=>this.setState({expenseArr: [...this.state.expenseArr]})}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ExpenseInput;","import React, {useEffect, useState} from 'react';\nimport IncomeInput from './IncomeInput';\nimport ExpenseInput from './ExpenseInput';\nimport './App.css';\n\nfunction App() {\n  let [total, setTotal] = useState();\n  let [incomes, setIncomes] = useState();\n  let [expenses, setExpenses] = useState();\n\n  const calcTotal = () => {\n    setTotal((incomes - expenses).toFixed(2));\n  }\n\n  const getIncomes = (array) => {\n    let sum = 0;\n    array.forEach(el=>{\n      sum += parseFloat(el.money);\n    });\n    setIncomes(sum.toFixed(2));\n  }\n\n  const getExpenses = (array) => {\n    let sum = 0;\n    array.forEach(el=>{\n      sum += parseFloat(el.money);\n    });\n    setExpenses(sum.toFixed(2));\n  }\n  useEffect(()=>{\n    calcTotal();\n  })\n  \n  return (\n    <div className='container'>\n      <div className='incomeExpense'>\n        <div className='income'>\n          <h1>Incomes</h1>\n          <IncomeInput action={getIncomes}/>\n          <h1 className='positive'>${incomes}</h1>\n        </div>\n        <div className='expense'>\n          <h1>Expenses</h1>\n          <ExpenseInput action={getExpenses}/>\n          <h1 className='negative'>${expenses}</h1>\n        </div>\n      </div>\n      <div className='total'>\n        <h1>Monthly Gain/Loss</h1>\n        <h1 className={((total >= 0) ? 'positive' : 'negative')}>${total}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}